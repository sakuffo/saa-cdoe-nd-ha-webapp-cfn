Description: 
    Stephen Akuffo
    Udacity Project for Cloud DevOps Nanodegree
Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  NameOfApp:
    Type: String
    Description: Name of the App
    Default: "Udagram-saa"
  PubCidrBlocks:
    Type: CommaDelimitedList
    Description: The Cidr range of the Public Range. Please note, it must fall within your VPC Cidr range.
    Default: "10.7.30.0/24, 10.7.31.0/24"
  PrivCidrBlocks:
    Type: CommaDelimitedList
    Description: The Cidr range of the Public Range. Please note, it must fall within your VPC Cidr range.
    Default: "10.7.60.0/24, 10.7.61.0/24"


Resources:
# IGW
  UdaIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-IGW

  UdaIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref UdaIGW
      VpcId: 
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"

# NAT
  UdaNatGatwayEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-EIP
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe
  
  UdaNatGatwayEIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-EIP
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe
  
  
  UdaNatGatwayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UdaNatGatwayEIPA.AllocationId
      SubnetId: !Ref UdaPublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-NAT-A
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe

  UdaNatGatwayB:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt UdaNatGatwayEIPB.AllocationId
        SubnetId: !Ref UdaPublicSubnetA
        Tags:
          - Key: Name
            Value: !Sub ${NameOfApp}-NAT-B
          - Key: course-work
            Value: "true"
          - Key: nd
            Value: cdoe

# Public Subnets
  UdaPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [0, !Ref PubCidrBlocks]
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET-A
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
  UdaPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [1, !Ref PubCidrBlocks]
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET-B
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public

# Private Subnets
  UdaPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [0, !Ref PrivCidrBlocks]
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-A
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
  UdaPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [1, !Ref PrivCidrBlocks]
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-B
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private

  
# Routes
  UdaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PublicRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
      VpcId:
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
  UdaPrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PrivateRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
      VpcId:
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
  UdaPrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PrivateRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
      VpcId:
        Fn::ImportValue: !Sub "${NameOfApp}-VPCID"
  UdaPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdaIGW
  UdaPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdaNatGatwayA
  UdaPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdaNatGatwayB

  UdaPublicRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetA
      RouteTableId: !Ref UdaPublicRouteTable
  UdaPublicRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetB
      RouteTableId: !Ref UdaPublicRouteTable

  UdaPrivateRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetA
      RouteTableId: !Ref UdaPrivateRouteTableA
  UdaPrivateRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetB
      RouteTableId: !Ref UdaPrivateRouteTableB

Outputs:
  UdaPrivSubnetA:
    Description: The ID of the VPC
    Value: !Ref UdaPrivateSubnetA
    Export:
      Name: !Sub "${NameOfApp}-PRIV-NET-A"
  UdaPrivSubnetB:
    Description: The ID of the VPC
    Value: !Ref UdaPrivateSubnetB
    Export:
      Name: !Sub "${NameOfApp}-PRIV-NET-B"
  UdaPrivSubnetNets:
    Description: The ID of the VPC
    Value: !Join [ ",", [ !Ref UdaPrivateSubnetA, !Ref UdaPrivateSubnetB ]]
    Export:
      Name: !Sub "${NameOfApp}-PRIV-NETS"
  UdaPubSubnetA:
    Description: The ID of the VPC
    Value: !Ref UdaPublicSubnetA
    Export:
      Name: !Sub "${NameOfApp}-PUB-NET-A"
  UdaPubSubnetB:
    Description: The ID of the VPC
    Value: !Ref UdaPublicSubnetB
    Export:
      Name: !Sub "${NameOfApp}-PUB-NET-B"
