Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  NameOfApp:
    Type: String
    Description: Name of the App
    Default: "Udagram"
  UdaWebServerCount:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '4'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  DefaultInstanceType:
    Description: "EC2 Instance type"
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t2.micro
      - t2.small
      - t2.medium
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0885b1f6bd170450c
    us-west-2:
      AMI: ami-0ac73f33a1888c64a
Resources:

# IAM
  UdagramS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: UdagramS3ReadOnlyEC2
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: UdagramS3ReadOnlyEC2
      Tags:
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe

  UdagramWebProfie:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdagramS3ReadOnlyEC2
  
  # Basition Host Disabled for Production
  # BastionRole:
  #   Type: AWS::IAM::Role
  #   Properties: 
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - 
  #           Effect: "Allow"
  #           Principal: 
  #             Service: 
  #               - "ec2.amazonaws.com"
  #           Action: 
  #             - "sts:AssumeRole"
  #     Path: "/"
  # Basition Host Disabled for Production        
  # BastionPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: BastionPolicy
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action: '*'
  #           Resource: '*'
  #     Roles: 
  #       - !Ref BastionRole
  # Basition Host Disabled for Production    
  # BastionProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref BastionRole

# VPC
  UdaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-VPC
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe

# IGW
  UdaIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-IGW
  UdaIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref UdaIGW
      VpcId: !Ref UdaVPC

# NAT
  UdaNatGatwayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-EIP
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe
  UdaNatGatway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UdaNatGatwayEIP.AllocationId
      SubnetId: !Ref UdaPublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-NAT
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe

# Public Subnets
  UdaPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: 10.10.30.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET-A
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
  UdaPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: 10.10.31.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET-B
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
  UdaPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: 10.10.32.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET-C
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public

# Private Subnets
  UdaPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.10.60.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-A
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
  UdaPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.10.61.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-B
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
  UdaPrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.10.62.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-C
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
  
# Routes
  UdaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PublicRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
      VpcId: !Ref UdaVPC
  UdaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PrivateRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
      VpcId: !Ref UdaVPC
  UdaPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdaIGW
  UdaPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdaNatGatway

  UdaPublicRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetA
      RouteTableId: !Ref UdaPublicRouteTable
  UdaPublicRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetB
      RouteTableId: !Ref UdaPublicRouteTable
  UdaPublicRouteAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetC
      RouteTableId: !Ref UdaPublicRouteTable

  UdaPrivateRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetA
      RouteTableId: !Ref UdaPrivateRouteTable
  UdaPrivateRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetB
      RouteTableId: !Ref UdaPrivateRouteTable
  UdaPrivateRouteAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetC
      RouteTableId: !Ref UdaPrivateRouteTable

# Security Groups
  UdaPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameOfApp}-PUB-SG
      GroupDescription: !Sub ${NameOfApp} Public Security
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-SG

  UdaPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameOfApp}-PRIV-SG
      GroupDescription: !Sub ${NameOfApp} Private Security
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref UdaPublicSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref UdaPublicSG
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-SG

# ALB
  UdaALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref UdaPublicSubnetA
        - !Ref UdaPublicSubnetB
        - !Ref UdaPublicSubnetC
      Name: UdaALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref UdaPublicSG
        - !Ref UdaPrivateSG
  UdaALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UdaALBTG
      LoadBalancerArn: !Ref UdaALB
      Port: 80
      Protocol: HTTP
  UdaALBTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref UdaVPC
      Tags:
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private

# EC2
  # Basition Host Disabled for Production

  # BastionHost:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId:
  #       Fn::FindInMap:
  #         - RegionMap
  #         - !Ref AWS::Region
  #         - AMI
  #     InstanceType: !Ref DefaultInstanceType
  #     KeyName: 'udak'
  #     Tags:
  #       - Key: Name
  #         Value: BastionHost
  #       - Key: layer
  #         Value: admin
  #     SecurityGroupIds:
  #         - !Ref UdaPrivateSG
  #         - !Ref UdaPublicSG
  #     SubnetId: !Ref UdaPublicSubnetA
  #     IamInstanceProfile: !Ref BastionProfile

  UdaWebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref UdaPrivateSubnetB
        - !Ref UdaPrivateSubnetA
        - !Ref UdaPrivateSubnetC
      LaunchConfigurationName: !Ref UdaLaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: !Ref UdaWebServerCount
      TargetGroupARNs:
        - !Ref UdaALBTG
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: !Ref UdaWebServerCount
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 3
        PauseTime: PT15M
        WaitOnResourceSignals: true
  UdaLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
          - RegionMap
          - !Ref AWS::Region
          - AMI
      InstanceType: !Ref DefaultInstanceType
      IamInstanceProfile: !Ref UdagramWebProfie
      SecurityGroups:
        - !Ref UdaPrivateSG
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              sudo apt update -y
            - |
              sudo apt install apache2
            - |
              echo <html><h1>it works! Udagram, Udacity</h1></html> > /var/www/html/index.html
            - |
              sudo ufw allow 'Apache'
            - |
              systemctl start apache2
            - |
Outputs:
  UdaVPCID:
    Description: The ID of the VPC
    Value: !Ref UdaVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  UdaALBDNS:
    Description: The DNS of the App through ALB
    Value: !GetAtt UdaALB.DNSName