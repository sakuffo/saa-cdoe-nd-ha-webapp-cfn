Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  NameOfApp:
    Type: String
    Description: Name of the App
    Default: "Udagram"

  KeyName:
    Description: Amazon EC2 KeyPair
    Type: String
    Default: "udak"

  DefaultInstanceType:
    Description: "EC2 Instance type"
    Type: String
    Default: t2.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t2.micro
      - t2.small
      - t2.medium

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-east-2:
      AMI: ami-02e680c4540db351e
    us-west-2:
      AMI: ami-a0cfeed8
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access

  # IAM
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: UdacityS3ReadOnlyEC2
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: UdacityS3ReadOnlyEC2
      Tags:
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
  
  BastionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
          
  BastionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BastionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      Roles: 
        - !Ref BastionRole
      
  BastionProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionRole

  # VPC
  UdaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-VPC
        - Key: course-work
          Value: "true"
        - Key: nd
          Value: cdoe

  # Networking

  #IGW
  UdaIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-IGW

  UdaIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref UdaIGW
      VpcId: !Ref UdaVPC

  UdaNatGatwayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  UdaNatGatway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UdaNatGatwayEIP.AllocationId
      SubnetId: !Ref UdaPublicSubnetA

  #Subnets
  UdaPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: 10.10.30.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
  
  UdaPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: 10.10.31.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public

  UdaPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      CidrBlock: 10.10.32.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public

  UdaPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.10.60.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-A
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private

  UdaPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.10.61.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-B
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private

  UdaPrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 10.10.62.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET-C
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
  # Routes
  UdaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PublicRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
      VpcId: !Ref UdaVPC
  UdaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PrivateRT
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private
      VpcId: !Ref UdaVPC
  UdaPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdaIGW
  UdaPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdaNatGatway

  UdaPublicRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetA
      RouteTableId: !Ref UdaPublicRouteTable
  UdaPublicRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetB
      RouteTableId: !Ref UdaPublicRouteTable
  UdaPublicRouteAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnetC
      RouteTableId: !Ref UdaPublicRouteTable

  UdaPrivateRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetA
      RouteTableId: !Ref UdaPrivateRouteTable
  UdaPrivateRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetB
      RouteTableId: !Ref UdaPrivateRouteTable
  UdaPrivateRouteAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnetC
      RouteTableId: !Ref UdaPrivateRouteTable

  #Security Groups
  UdaPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameOfApp}-PUB-SG
      GroupDescription: !Sub ${NameOfApp} Public Security
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-SG

  UdaPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameOfApp}-PRIV-SG
      GroupDescription: !Sub ${NameOfApp} Private Security
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref UdaPublicSG
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-SG

  #EC2
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - AMI
      InstanceType: !Ref DefaultInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: BastionHost
        - Key: layer
          Value: admin
      SecurityGroupIds:
          - !Ref UdaPrivateSG
          - !Ref UdaPublicSG
      SubnetId: !Ref UdaPublicSubnetA
      IamInstanceProfile: !Ref BastionProfile

  # ALB
  UdaALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref UdaPublicSubnetA
        - !Ref UdaPublicSubnetB
        - !Ref UdaPublicSubnetC
      Name: UdaALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref UdaPublicSG
        - !Ref UdaPrivateSG

  UdaALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UdaALBTG
      LoadBalancerArn: !Ref UdaALB
      Port: 80
      Protocol: HTTP

  UdaALBTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref UdaVPC
      Tags:
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private

Outputs:
  UdaVPCID:
    Description: The ID of the VPC
    Value: !Ref UdaVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  BastionHostDNS:
    Description: The PublicDNS of the Bastion Host
    Value: !GetAtt BastionHost.PublicDnsName