Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  NameOfApp:
    Type: String
    Description: Name of the App
    Default: "Udagram"

  KeyName:
    Description: Amazon EC2 KeyPair
    Type: String
    Default: "Udagram"

  InstanceType:
    Description: "EC2 Instance type"
    Type: "String"
    Default: "t3.micro"
    AllowedValues: [
      "t2.micro",
      "t2.small",
      "t2.medium",
      "t3.micro",
      "t3.small",
      "t3.medium"
    ]

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-east-2:
      AMI: ami-02e680c4540db351e
    us-west-2:
      AMI: ami-a0cfeed8
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
 
  # VPC
  UdaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Sub ${NameOfApp}-VPC
      - Key: course-work
        Value: true
      - Key: nd
        Value: cdoe

  # Networking
  
  #IGW
  UdaIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-IGW

  UdaIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref UdaIGW
      VpcId: !Ref UdaVPC

  UdaNatGatwayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  UdaNatGatway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt UdaNatGatwayEIP.AllocationId
      SubnetId: !Ref UdaPublicSubnet

  #Subnets
  UdaPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      CidrBlock: 10.10.37.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-NET
        - Key: program
          Value: cdoe
        - Key: scope
          Value: public
  
  UdaPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      CidrBlock: 10.10.73.1/24
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-NET
        - Key: program
          Value: cdoe
        - Key: scope
          Value: private

  # Routes
  UdaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
      - Key: Name
        Value: !Sub ${NameOfApp}-PublicRT
      - Key: program
        Value: cdoe
      - Key: scope
        Value: public
      VpcId: !Ref UdaVPC

  UdaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
      - Key: Name
        Value: !Sub ${NameOfApp}-PrivateRT
      - Key: program
        Value: cdoe
      - Key: scope
        Value: private
      VpcId: !Ref UdaVPC

  UdaPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdaIGW
  
  
  UdaPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UdaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref UdaNatGatway

  
  UdaPublicRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPublicSubnet
      RouteTableId: !Ref UdaPublicRouteTable

  UdaPrivateRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UdaPrivateSubnet
      RouteTableId: !Ref UdaPrivateRouteTable

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Description: UdacityS3ReadOnlyEC2
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: UdacityS3ReadOnlyEC2
      Tags: 
        - Key: course-work
          Value: true
        - Key: nd
          Value: cdoe

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  BastionProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - admin

  UdaPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameOfApp}-PUB-SG
      GroupDescription: !Sub ${NameOfApp} Public Security
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PUB-SG

  UdaPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameOfApp}-PRIV-SG
      GroupDescription: !Sub ${NameOfApp} Private Security
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref UdaPublicSG
      Tags:
        - Key: Name
          Value: !Sub ${NameOfApp}-PRIV-SG

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: BastionHost
        - Key: layer
          Value: admin
      KeyName: !Ref KeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "UdaPublicSG"
          SubnetId: !Sub "${UdaPublicSubnet}"

Outputs: 
  UdaVPCID:
    Description: The ID of the VPC
    Value: !Ref UdaVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  NameOfApp:
    Description: The Name of the App
    Value: !Ref NameOfApp
    Export:
      Name: AppName
  UdaPUBNETID:
    Description: The ID of the VPC
    Value: !Ref UdaPublicSubnet
    Export:
      Name: UdaPUBNETID
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html